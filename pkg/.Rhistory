source(paste(model_dir,"migrant_model.R",sep="/"))
# Data input #
## Set Input files ##
migrant.datafile <- paste(model_dir,"migrant_inputs.xlsx",sep="/")
areas.datafile <- paste(model_dir,"ship_info.xlsx",sep="/")
processing.datafile <- paste(model_dir,"processing_inputs.xlsx",sep="/")
initial.conditions.datafile <- paste(model_dir,"initialization.xlsx",sep="/")
## Source Data File ##
source(paste(model_dir,"migrant_data_input.R",sep="/"))
# Build model with data (produces "env",total.days) #
## Set Build Parameters ##
total.days <- 30
repat.at.sea.prob <- 0.1
## Source Build Script ##
source(paste(model_dir,"migrant_model_build.R",sep="/"))
# Run and analyze #
env %>% run(
until <- total.days*24
)
create_steps <- function(df,x.col,y.col,group.col){
if(is.numeric(x.col)){
x.int <- x.col
} else {
x.int <- which(names(df)==x.col)
}
if(is.numeric(y.col)){
y.int <- y.col
} else {
y.int <- which(names(df)==y.col)
}
if(is.numeric(group.col)){
group.int <- group.col
} else {
group.int <- which(names(df)==group.col)
}
x <- NULL
y <- NULL
g <- NULL
for(u in unique(df[,group.int])){
w <- which(df[,group.int]==u)
d <- df[w,]
d <- d[order(d[,x.int]),]
vec.x <- d[,x.int]
vec.y <- d[,y.int]
x <- c(
x,
rbind(
vec.x[1:(length(vec.x)-1)],
vec.x[1:(length(vec.x)-1)]
),
vec.x[length(vec.x)]
)
y <- c(
y,
vec.y[1],
rbind(
vec.y[2:(length(vec.y))],
vec.y[2:(length(vec.y))]
)
)
g <- c(
g,
rep(u,length(vec.x)*2-1)
)
}
df.out <- data.frame(
x,
y,
g,
stringsAsFactors=FALSE
)
names(df.out) <- names(df)[c(x.int,y.int,group.int)]
return(df.out)
}
resources <- get_mon_resources(env)
resources$time <- resources$time/24
resources <- resources[order(resources$time),]
w <- which(resources$resource %in% c("nsgb.counter","afloat.counter"))
df <- create_steps(
resources[w,],
"time",
"server",
"resource"
)
max.y <- max(df$server[which(df$resource=="nsgb.counter")])
camp.capacity <- data.frame(
resource = rep("Camp Capacity",12),
time = c(15,17,17,19,19,24,24,25,25,27,27,total.days+15)-15,
capacity = c(8190,8190,10934,10934,13574,13574,18278,18278,21806,21806,30324,30324),
stringsAsFactors = FALSE
)
# Produce plot with AFLOAT and CAMP counts with Capacity lines
g <- ggplot(
) +
geom_line(
data = df,
mapping = aes(
x = time,
y = server,
color=resource,
group=resource
),
size=3
) +
labs(
x = "Time (C+ days)",
y = "Migrant Counts",
title = "Migrant Population Over Time"
) +
geom_hline(
yintercept = 6100,
color = "darkorange",
linetype = "dashed",
size = 1
) +
geom_line(
data = camp.capacity,
mapping = aes(
x = time,
y = capacity
),
color="darkgreen",
size = 1,
linetype = "dashed"
) +
scale_color_manual(
name= "Location",
values = c(
afloat.counter = "darkorange",
nsgb.counter = "darkgreen"
),
breaks = c(
"afloat.counter",
"nsgb.counter"
),
labels = c(
"Afloat",
"GTMO"
)
) +
scale_x_continuous(
labels = function(x) return(x+15),
breaks=seq(0,30,5)
) +
scale_y_continuous(breaks=seq(0,max.y,5000))+
theme_bw()+
theme(
legend.text = element_text(size=15),
legend.title = element_text(size=16),
axis.text = element_text(size = 15),
title = element_text(size = 22)
)
camp.exceeds <- df$time[min(which(df$server>30324 & df$resource=="nsgb.counter"))]+15
max.afloat <- max(df$server[which(df$resource=="afloat.counter")])
avg.afloat <- mean(df$server[which(df$resource=="afloat.counter")])
max.camp <- max(df$server[which(df$resource=="nsgb.counter")])
avg.camp <- mean(df$server[which(df$resource=="nsgb.counter")])
#####  ARRIVALS AT NSGB   ###################
resources$day <- floor(resources$time)
q <- aggregate(
formula = formula(server~day),
data = resources[which(resources$resource=="nsgb.counter"),],
FUN = max
)
r <- aggregate(
formula = formula(server~day+resource),
data = resources[which(resources$resource %in% c("repat-Haitian","repat-Cuban","repat-Other")),],
FUN = max
)
s <- aggregate(
formula = formula(server ~ day),
data = r,
FUN = sum
)
# Compute GTMO Arrival Stats
GTMO.arrivals <- q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)]+s$server[2:nrow(s)]
#barplot(GTMO.arrivals,xlab="Day",names.arg=q$day[2:nrow(q)],ylab="Migrants landing at GTMO")
mean.gtmo <- mean(GTMO.arrivals)
max.gtmo <- max(GTMO.arrivals)
above.2k <- length(which(GTMO.arrivals>=2000))
plot(g)
cat(mean.gtmo)
source('//ent.ussouthcom.mil/dfs/homedrives/christopher.marks/Desktop/Rscripts/migration/IA/run.R', echo=TRUE)
2100*.9
q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)]
s$server[2:nrow(s)]
q$server[2:nrow(q)]
q$server[1:(nrow(q)-1)]
source('//ent.ussouthcom.mil/dfs/homedrives/christopher.marks/Desktop/Rscripts/migration/IA/run.R', echo=TRUE)
q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)]
mean(q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)])
2100*0.9
source('//ent.ussouthcom.mil/dfs/homedrives/christopher.marks/Desktop/Rscripts/migration/IA/run.R', echo=TRUE)
# Compute GTMO Arrival Stats
GTMO.arrivals <- q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)]+s$server[1:(nrow(s)-1)]
mean.gtmo <- mean(GTMO.arrivals)
cat(mean.gtmo)
2100*0.9
GTMO.arrivals <- q$server[2:nrow(q)]-q$server[1:(nrow(q)-1)]+s$server[2:(nrow(s))]
GTMO.arrivals
mean.gtmo <- mean(GTMO.arrivals)
cat(mean.gtmo)
max.gtmo <- max(GTMO.arrivals)
source('//ent.ussouthcom.mil/dfs/homedrives/christopher.marks/Desktop/Rscripts/migration/IA/run.R', echo=TRUE)
source('//ent.ussouthcom.mil/dfs/homedrives/christopher.marks/Desktop/Rscripts/migration/IA/run.R', echo=TRUE)
get_color_scale_continuous <- function(
low.val,
high.val,
low.col=NULL,
high.col=NULL,
na.col.val = "#FFFFFF00",
opacity=1,
rotate.clockwise=TRUE
){
if(opacity > 1){
op <- 1
} else if(opacity < 0){
op <- 0
} else {
op <- opacity
}
if(is.null(low.col) || is.null(high.col)){
l.h <- 0
l.s <- 0.75
l.v <- 0.75
h.h <- 0.4
h.s <- 0.85
h.v <- 0.9
get_color_gen1 <- function(lv,hv,h.min,s.min,v.min,h.max,s.max,v.max,opac){
o <- function(df.var,na.col=na.col.val){
if(is.na(df.var) || is.null(df.var) || !(is.numeric(df.var))){
color <- na.col
} else if(df.var > hv){
color <- grDevices::hsv(h.max,s.max,v.max)
} else if(df.var < lv){
color <- grDevices::hsv(h.min,s.min,v.min)
} else {
l <- 1-(df.var-lv)/(hv-lv)
hh <- h.min*l + h.max*(1-l)
ss <- s.min*l + s.max*(1-l)
vv <- v.min*l + v.max*(1-l)
color <- grDevices::hsv(hh,ss,vv)
}
color <- paste(
color,
format(as.hexmode(round((opac)*255)),width=2,upper.case=TRUE),
sep=""
)
return(color)
}
return(o)
}
get_color <- get_color_gen1(low.val,high.val,l.h,l.s,l.v,h.h,h.s,h.v,opacity)
return(get_color)
} else {
if(
is.character(low.col) &&
substr(low.col,1,1) == "#" &&
nchar(low.col) == 9 &&
is.character(high.col) &&
substr(high.col,1,1) == "#" &&
nchar(high.col) == 9
){
op.min <- strtoi(paste("0x",substr(low.col,8,9),sep=""))/255
op.max <- strtoi(paste("0x",substr(high.col,8,9),sep=""))/255
} else {
op.min <- opacity
op.max <- opacity
}
get_color_gen2 <- function(lv,hv,lc,hc,min.opac,max.opac,na.col=na.col.val){
hsv.min <- rgb2hsv(t(lc))
hsv.max <- rgb2hsv(t(hc))
if(hsv.max[1] < hsv.min[1] && rotate.clockwise){
hsv.max[1] <- hsv.max[1] + 1
} else if(hsv.max[1] > hsv.min[1] && !rotate.clockwise) {
hsv.min[1] <- hsv.min[1] + 1
}
o <- function(df.var){
if(is.na(df.var) || is.null(df.var) || !(is.numeric(df.var))){
color <- na.col
} else {
l <- 1-(df.var-lv)/(hv-lv)
if (l > 1){
new.c <- lc
new.op <- min.opac
} else if(l < 0){
new.c <- hc
new.op <- max.opac
} else {
linear.comb <- hsv.min*l + hsv.max*(1-l)
if(linear.comb[1]>1) linear.comb[1] <- linear.comb[1]-1
new.c <- grDevices::hsv(linear.comb[1],linear.comb[2],linear.comb[3])
new.op <- min.opac*l + max.opac*(1-l)
}
color <- color_check(new.c,new.op)
}
return(color)
}
return(o)
}
get_color <- get_color_gen2(low.val,high.val,low.col,high.col,op.min,op.max)
return(get_color)
}
}
get_default_color_vec_discrete <- function(
values,
low.col=NULL,
high.col=NULL,
opacity = 1,
rotate.clockwise=TRUE
){
if(is.null(values)){
return(NULL)
} else {
uv <- sort(stats::na.omit(unique(values)),decreasing=TRUE)
f <- get_color_scale_continuous(
0,
1,
low.col=low.col,
high.col=high.col,
opacity=opacity,
rotate.clockwise=rotate.clockwise
)
color.vector <- sapply((0:(1-length(uv)))/(1-length(uv)),f)
names(color.vector)<- uv
return(color.vector)
}
}
get_color_scale_continuous(0,1,"red","green")
rgb2hsv
r2h <- function(color.str){
rr <- t(grDevices::col2rgb(color.str))/255
rgb.min<-min(rr)
rgb.max<-max(rr)
V <- rgb.max
if(rgb.max==0){
S <- 0
H <- 0
} else {
delta <- rgb.max-rgb.min
S <- delta/V
if(rr[1]==rgb.max){
H <- 0+1/6*(rr[2]-rr[3])/delta
} else if(rr[2]==rgb.max){
H <- 1/3 + 1/6*(rr[3]-rr[1])/delta
} else {
H <- 2/3+1/6*(rr[1]-rr[2])
}
}
if(H<0){
H <- H + 1
}
return(c(H,S,V))
}
get_color_scale_continuous <- function(
low.val,
high.val,
low.col=NULL,
high.col=NULL,
na.col.val = "#FFFFFF00",
opacity=1,
rotate.clockwise=TRUE
){
if(opacity > 1){
op <- 1
} else if(opacity < 0){
op <- 0
} else {
op <- opacity
}
if(is.null(low.col) || is.null(high.col)){
l.h <- 0
l.s <- 0.75
l.v <- 0.75
h.h <- 0.4
h.s <- 0.85
h.v <- 0.9
get_color_gen1 <- function(lv,hv,h.min,s.min,v.min,h.max,s.max,v.max,opac){
o <- function(df.var,na.col=na.col.val){
if(is.na(df.var) || is.null(df.var) || !(is.numeric(df.var))){
color <- na.col
} else if(df.var > hv){
color <- grDevices::hsv(h.max,s.max,v.max)
} else if(df.var < lv){
color <- grDevices::hsv(h.min,s.min,v.min)
} else {
l <- 1-(df.var-lv)/(hv-lv)
hh <- h.min*l + h.max*(1-l)
ss <- s.min*l + s.max*(1-l)
vv <- v.min*l + v.max*(1-l)
color <- grDevices::hsv(hh,ss,vv)
}
color <- paste(
color,
format(as.hexmode(round((opac)*255)),width=2,upper.case=TRUE),
sep=""
)
return(color)
}
return(o)
}
get_color <- get_color_gen1(low.val,high.val,l.h,l.s,l.v,h.h,h.s,h.v,opacity)
return(get_color)
} else {
if(
is.character(low.col) &&
substr(low.col,1,1) == "#" &&
nchar(low.col) == 9 &&
is.character(high.col) &&
substr(high.col,1,1) == "#" &&
nchar(high.col) == 9
){
op.min <- strtoi(paste("0x",substr(low.col,8,9),sep=""))/255
op.max <- strtoi(paste("0x",substr(high.col,8,9),sep=""))/255
} else {
op.min <- opacity
op.max <- opacity
}
get_color_gen2 <- function(lv,hv,lc,hc,min.opac,max.opac,na.col=na.col.val){
hsv.min <- r2h(t(lc))
hsv.max <- r2h(t(hc))
if(hsv.max[1] < hsv.min[1] && rotate.clockwise){
hsv.max[1] <- hsv.max[1] + 1
} else if(hsv.max[1] > hsv.min[1] && !rotate.clockwise) {
hsv.min[1] <- hsv.min[1] + 1
}
o <- function(df.var){
if(is.na(df.var) || is.null(df.var) || !(is.numeric(df.var))){
color <- na.col
} else {
l <- 1-(df.var-lv)/(hv-lv)
if (l > 1){
new.c <- lc
new.op <- min.opac
} else if(l < 0){
new.c <- hc
new.op <- max.opac
} else {
linear.comb <- hsv.min*l + hsv.max*(1-l)
if(linear.comb[1]>1) linear.comb[1] <- linear.comb[1]-1
new.c <- grDevices::hsv(linear.comb[1],linear.comb[2],linear.comb[3])
new.op <- min.opac*l + max.opac*(1-l)
}
color <- color_check(new.c,new.op)
}
return(color)
}
return(o)
}
get_color <- get_color_gen2(low.val,high.val,low.col,high.col,op.min,op.max)
return(get_color)
}
}
get_default_color_vec_discrete <- function(
values,
low.col=NULL,
high.col=NULL,
opacity = 1,
rotate.clockwise=TRUE
){
if(is.null(values)){
return(NULL)
} else {
uv <- sort(stats::na.omit(unique(values)),decreasing=TRUE)
f <- get_color_scale_continuous(
0,
1,
low.col=low.col,
high.col=high.col,
opacity=opacity,
rotate.clockwise=rotate.clockwise
)
color.vector <- sapply((0:(1-length(uv)))/(1-length(uv)),f)
names(color.vector)<- uv
return(color.vector)
}
}
get_color_scale_continuous(0,1,"red","green")
get_default_color_vec_discrete(1:16,"red","green")
color_check <- function(color.vector,alpha.vector=1){
ncols <- length(color.vector)
nalphs <- length(alpha.vector)
alpha.index <- 1
o <- NULL
for(i in 1:ncols){
color.str <- color.vector[i]
alpha <- alpha.vector[alpha.index]
if(nchar(color.str)==7 && grepl("#[0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F]",color.str)){
o <- append(o,col2hex(color.str,alpha))
} else if(nchar(color.str)==9 && grepl("#[0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F][0-9,A-F]",color.str)){
o <- append(o,color.str)
} else {
o <- append(o,col2hex(color.str,alpha))
}
if(alpha.index == nalphs){
alpha.index <- 1
} else {
alpha.index <- alpha.index + 1
}
}
return(o)
}
get_default_color_vec_discrete(1:16,"red","green")
col2hex <- function(color.str,alpha=1){
rgb.vector <- as.numeric(grDevices::col2rgb(color.str))
hex.out <- grDevices::rgb(rgb.vector[1],rgb.vector[2],rgb.vector[3],alpha*255,maxColorValue=255)
return(hex.out)
}
get_default_color_vec_discrete(1:16,"red","green")
get_default_color_vec_discrete(1:16,"red","green")
get_default_color_vec_discrete(1:16,"red","green")
q()
